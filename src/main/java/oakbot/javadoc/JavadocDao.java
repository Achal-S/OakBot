package oakbot.javadoc;

import java.io.IOException;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import oakbot.doclet.OakbotDoclet;

import com.google.common.collect.HashMultimap;
import com.google.common.collect.Multimap;

/**
 * Retrieves class information from Javadoc files.
 * @author Michael Angstadt
 */
public class JavadocDao {
	private final Multimap<String, String> aliases = HashMultimap.create();
	private final Map<String, ClassInfo> cache = Collections.synchronizedMap(new HashMap<>());
	private final List<LibraryZipFile> files = new ArrayList<>();

	/**
	 * Adds a Javadoc ZIP file to the DAO.
	 * @param zipFile the zip file (generated by {@link OakbotDoclet})
	 * @throws IOException if there was a problem reading the ZIP file
	 */
	public void addApi(Path zipFile) throws IOException {
		//add all the class names to the simple name index
		LibraryZipFile zip = new LibraryZipFile(zipFile);
		addApi(zip);
	}

	void addApi(LibraryZipFile zip) throws IOException {
		Iterator<String> it = zip.getClasses();
		while (it.hasNext()) {
			String fullName = it.next();
			int pos = fullName.lastIndexOf('.');
			String simpleName = fullName.substring(pos + 1);

			aliases.put(simpleName.toLowerCase(), fullName);
			aliases.put(simpleName, fullName);
			aliases.put(fullName.toLowerCase(), fullName);
			aliases.put(fullName, fullName);
		}

		files.add(zip);
	}

	/**
	 * Gets the documentation on a class.
	 * @param className a fully-qualified class name (e.g. "java.lang.String")
	 * or a simple class name (e.g. "String").
	 * @return the class documentation or null if the class was not found
	 * @throws IOException if there's a problem reading the class's Javadocs
	 * @throws MultipleClassesFoundException if a simple name was passed into
	 * this method and multiple classes were found that have that name
	 */
	public ClassInfo getClassInfo(String className) throws IOException, MultipleClassesFoundException {
		Collection<String> names = aliases.get(className);
		if (names.isEmpty()) {
			//try case-insensitive search
			names = aliases.get(className.toLowerCase());
		}

		if (names.isEmpty()) {
			//no class found
			return null;
		}

		if (names.size() > 1) {
			//multiple classes found
			throw new MultipleClassesFoundException(names);
		}

		className = names.iterator().next();

		//check the cache
		ClassInfo info = cache.get(className);
		if (info != null) {
			return info;
		}

		//parse the class info from the Javadocs
		for (LibraryZipFile zip : files) {
			info = zip.getClassInfo(className);
			if (info != null) {
				cache.put(className, info);
				return info;
			}
		}

		return null;
	}
}
