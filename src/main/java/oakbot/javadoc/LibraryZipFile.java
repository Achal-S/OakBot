package oakbot.javadoc;

import java.io.IOException;
import java.io.InputStream;
import java.nio.file.DirectoryStream;
import java.nio.file.DirectoryStream.Filter;
import java.nio.file.FileSystem;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import oakbot.doclet.OakbotDoclet;
import oakbot.util.DocumentWrapper;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.xml.sax.SAXException;

/**
 * Represents a ZIP file that was generated by {@link OakbotDoclet}, which
 * contains Javadoc information.
 * @author Michael Angstadt
 */
public class LibraryZipFile {
	private static final String extension = ".xml";
	private static final String infoFileName = "info" + extension;

	private final Path file;
	private final String baseUrl;
	private final String name;

	public LibraryZipFile(Path file) throws IOException {
		this.file = file;

		try (FileSystem fs = FileSystems.newFileSystem(file, null)) {
			Path info = fs.getPath("/" + infoFileName);
			if (!Files.exists(info)) {
				baseUrl = name = null;
				return;
			}

			Element infoElement;
			try (InputStream in = Files.newInputStream(info)) {
				DocumentWrapper document = new DocumentWrapper(DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(in));
				infoElement = document.element("/info");
			} catch (ParserConfigurationException e) {
				//should never be thrown
				throw new RuntimeException(e);
			} catch (SAXException e) {
				throw new IOException(e);
			}

			if (infoElement == null) {
				baseUrl = name = null;
				return;
			}

			String name = infoElement.getAttribute("name");
			this.name = name.isEmpty() ? null : name;

			String baseUrl = infoElement.getAttribute("baseUrl");
			this.baseUrl = baseUrl.isEmpty() ? null : baseUrl;
		}
	}

	/**
	 * Gets a list of all classes that are in the library.
	 * @return the fully-qualified names of all the classes
	 * @throws IOException if there's a problem reading the ZIP file
	 */
	public List<String> getClasses() throws IOException {
		List<String> classes = new ArrayList<>();
		try (FileSystem fs = FileSystems.newFileSystem(file, null)) {
			try (DirectoryStream<Path> stream = Files.newDirectoryStream(fs.getPath("/"), new Filter<Path>() {
				@Override
				public boolean accept(Path entry) throws IOException {
					String name = file.getFileName().toString();
					if (!name.endsWith(extension)) {
						return false;
					}

					return !name.equals(infoFileName);
				}

			})) {
				for (Path file : stream) {
					String name = file.getFileName().toString();
					String fullName = name.substring(0, name.length() - 4);
					classes.add(fullName);
				}
			}
		}
		return classes;
	}

	/**
	 * Gets the parsed XML DOM of the given class.
	 * @param fullName the fully-qualifed class name (e.g. "java.lang.String")
	 * @return the XML DOM or null if the class was not found
	 * @throws IOException if there was a problem reading from the ZIP file or
	 * parsing the XML
	 */
	public Document getClassXml(String fullName) throws IOException {
		try (FileSystem fs = FileSystems.newFileSystem(file, null)) {
			Path path = fs.getPath(fullName + extension);
			if (!Files.exists(path)) {
				return null;
			}

			try (InputStream in = Files.newInputStream(path)) {
				return DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(in);
			} catch (SAXException | ParserConfigurationException e) {
				throw new IOException(e);
			}
		}
	}

	/**
	 * Gets the base URL of this library's Javadocs.
	 * @return the base URL or null if it doesn't have one
	 */
	public String getBaseUrl() {
		return baseUrl;
	}

	/**
	 * Gets the name of this library.
	 * @return the name (e.g. "jsoup 1.8.1") or null if it doesn't have one
	 */
	public String getName() {
		return name;
	}

}